[{"/Users/Barna/Documents/Code/household-account/src/index.jsx":"1","/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js":"2","/Users/Barna/Documents/Code/household-account/src/App.jsx":"3","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx":"4","/Users/Barna/Documents/Code/household-account/src/Account.jsx":"5","/Users/Barna/Documents/Code/household-account/src/data.js":"6","/Users/Barna/Documents/Code/household-account/src/Movements.jsx":"7","/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx":"8","/Users/Barna/Documents/Code/household-account/src/Overlay.jsx":"9","/Users/Barna/Documents/Code/household-account/src/Status.jsx":"10","/Users/Barna/Documents/Code/household-account/src/Login.jsx":"11","/Users/Barna/Documents/Code/household-account/src/Counter.jsx":"12","/Users/Barna/Documents/Code/household-account/src/useCounter.js":"13","/Users/Barna/Documents/Code/household-account/src/updateAccsRepay.js":"14","/Users/Barna/Documents/Code/household-account/src/updateFunctions.js":"15"},{"size":501,"mtime":1607885450289,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1607885083550,"results":"18","hashOfConfig":"17"},{"size":9111,"mtime":1613765079668,"results":"19","hashOfConfig":"17"},{"size":861,"mtime":1613428964132,"results":"20","hashOfConfig":"17"},{"size":11931,"mtime":1613683678338,"results":"21","hashOfConfig":"17"},{"size":1871,"mtime":1613933764260,"results":"22","hashOfConfig":"17"},{"size":987,"mtime":1613159979736,"results":"23","hashOfConfig":"17"},{"size":3408,"mtime":1613686248522,"results":"24","hashOfConfig":"17"},{"size":720,"mtime":1612646108654,"results":"25","hashOfConfig":"17"},{"size":1444,"mtime":1613680343798,"results":"26","hashOfConfig":"17"},{"size":1973,"mtime":1612666656220,"results":"27","hashOfConfig":"17"},{"size":299,"mtime":1612646108650,"results":"28","hashOfConfig":"17"},{"size":306,"mtime":1612646108664,"results":"29","hashOfConfig":"17"},{"size":1457,"mtime":1613401271014,"results":"30","hashOfConfig":"17"},{"size":3488,"mtime":1613932977619,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1asedt4",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Barna/Documents/Code/household-account/src/index.jsx",[],["69","70"],"/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js",[],"/Users/Barna/Documents/Code/household-account/src/App.jsx",["71"],"import \"./App.scss\";\nimport TopNav from \"./TopNav.jsx\";\nimport Account from \"./Account.jsx\";\nimport Overlay from \"./Overlay.jsx\";\nimport Login from \"./Login.jsx\";\nimport React from \"react\";\nimport NewOperator from \"./NewOperator.jsx\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { accounts, date } from \"./data.js\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { updateCurrAcc, updateAccsLend } from \"./updateFunctions.js\";\nimport { updateAccsRepay } from \"./updateAccsRepay.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAcc: undefined,\n      accounts: accounts,\n      actuelDate: date,\n      overlayHidden: true,\n      overlayText: \"\",\n      loginVisibility: true,\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLend = this.handleLend.bind(this);\n    this.handleRepayment = this.handleRepayment.bind(this);\n    this.handleUploadMoney = this.handleUploadMoney.bind(this);\n    this.escFunction = this.escFunction.bind(this);\n    this.handleCloseOverlay = this.handleCloseOverlay.bind(this);\n    this.handleLogOut = this.handleLogOut.bind(this);\n    this.validationForTransaction = this.validationForTransaction.bind(this);\n  }\n\n  validationForTransaction(state, fromAcc, forAcc, amount, transactionTyp) {\n    // - WhiteSpace\n    fromAcc = fromAcc.trim();\n    forAcc = forAcc.trim();\n\n    // creating \"valid\" variable to validationForTransaction checking acc\n    const valid = state.accounts.find((acc) => acc.username === forAcc);\n    //checking whether there is a debt or not\n    const doIHaveDebt = state.currentAcc.debt.find(\n      (item) => item.to === forAcc\n    );\n    /// creating obj variable to update the state if the certain conditions meet\n    const obj = { overlayHidden: false, overlayText: \"\" };\n    if (!valid) {\n      obj.overlayText = \"Invalid userName\";\n    } else if (fromAcc === forAcc) {\n      obj.overlayText = \"You can't send money for Yourself!\";\n    } else if (doIHaveDebt === undefined && transactionTyp !== \"lend\") {\n      obj.overlayText = `You don't have any debt for ${forAcc.toUpperCase()}`;\n    } else if (doIHaveDebt?.value - amount < 0) {\n      obj.overlayText = `You have to check first your debts`;\n    } else if (!forAcc && !amount) {\n      obj.overlayText = \"Missed dates\";\n    } else if (amount > state.currentAcc.balance) {\n      obj.overlayText = \"You don't have enough money!\";\n    } else if (amount <= 0) {\n      obj.overlayText = \"Invalid value\";\n    }\n\n    if (obj.overlayText !== \"\") {\n      this.setState(obj);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  handleLogOut() {\n    this.setState({\n      loginVisibility: true,\n      currentAcc: undefined,\n    });\n  }\n  handleLogin(username, pin) {\n    const valid = this.state.accounts.find((acc) => acc.username === username);\n    if (valid) {\n      this.setState({\n        currentAcc: this.state.accounts.find(\n          (acc) => acc.username === username\n        ),\n        loginVisibility: false,\n      });\n    }\n  }\n\n  handleUploadMoney(forAcc, amount, message = \"upload\") {\n    console.log(forAcc, amount);\n    if (amount <= 0) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid value\",\n      });\n    } else\n      this.setState((prev) => {\n        return {\n          currentAcc: {\n            ...prev.currentAcc,\n            movements: [\n              {\n                amount: amount,\n                date: date,\n                transactionTyp: \"upload\",\n                sender: forAcc,\n                recepient: forAcc,\n                message: message,\n              },\n              ...prev.currentAcc.movements,\n            ],\n            balance: prev.currentAcc.balance + amount,\n          },\n\n          accounts: this.state.accounts.map((acc) => {\n            if (acc.username === forAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: +amount,\n                    date: date,\n                    transactionTyp: \"upload\",\n                    sender: forAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance + amount,\n              };\n            }\n            return acc;\n          }),\n        };\n      });\n  }\n\n  handleCloseOverlay() {\n    this.setState({\n      overlayHidden: true,\n    });\n  }\n  escFunction(event) {\n    if (event.keyCode === 27) {\n      this.setState({\n        overlayHidden: true,\n      });\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.escFunction, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.escFunction, false);\n  }\n\n  handleRepayment(fromAcc, forAcc, amount, message = \"repayment\") {\n    const isValid = this.validationForTransaction(\n      this.state,\n      fromAcc,\n      forAcc,\n      amount\n    );\n    if (isValid)\n      this.setState((prev) => {\n        return {\n          currentAcc: updateCurrAcc(\n            forAcc,\n            \"repayment\",\n            amount,\n            message,\n            prev,\n            date\n          ),\n          accounts: updateAccsRepay(\n            fromAcc,\n            forAcc,\n            \"repayment\",\n            amount,\n            message,\n            this.state,\n            prev,\n            date\n          ),\n        };\n      });\n  }\n\n  handleLend(fromAcc, forAcc, amount, message = \"dunno\") {\n    // validationForTransaction\n    const isValid = this.validationForTransaction(\n      this.state,\n      fromAcc,\n      forAcc,\n      amount,\n      \"lend\"\n    );\n    if (isValid) {\n      this.setState((prev) => {\n        //////////lended array contain the acc who you are lending to /////////////\n        const isAccExistsInLended = prev.currentAcc.lended.some(\n          (item) => item.to === forAcc\n        ); /// lepassolni az indexet\n\n        console.log(isAccExistsInLended);\n        if (isAccExistsInLended) {\n          return {\n            currentAcc: updateCurrAcc(\n              forAcc,\n              \"lend\",\n              -amount,\n              message,\n              prev,\n              date,\n              isAccExistsInLended\n            ),\n            accounts: updateAccsLend(\n              this.state.accounts,\n              fromAcc,\n              forAcc,\n              amount,\n              message,\n              date,\n              isAccExistsInLended\n            ),\n          };\n        }\n        /////////lended array doesn't contain the acc who you are lending to ///////\n        return {\n          currentAcc: updateCurrAcc(\n            forAcc,\n            \"lend\",\n            -amount,\n            message,\n            prev,\n            date,\n            isAccExistsInLended\n          ),\n          accounts: updateAccsLend(\n            this.state.accounts,\n            fromAcc,\n            forAcc,\n            amount,\n            message,\n            date,\n            isAccExistsInLended\n          ),\n        };\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Overlay\n            overlayText={this.state.overlayText}\n            hidden={this.state.overlayHidden}\n            handleCloseOverlay={this.handleCloseOverlay}\n          />\n          <TopNav\n            currentAcc={this.state.currentAcc}\n            login={this.handleLogin}\n            logOutBtnVisibility={this.state.loginVisibility}\n            logOut={this.handleLogOut}\n          />\n          <Route\n            render={({ location }) => (\n              <TransitionGroup>\n                <CSSTransition\n                  classNames=\"login-transition\"\n                  timeout={1000}\n                  key={location.key}\n                >\n                  <Switch location={location}>\n                    <Route path=\"/login\">\n                      <Login\n                        isAnimationEnded={this.state.isAnimationEnded}\n                        currentAcc={this.state.currentAcc}\n                        login={this.handleLogin}\n                        loginVisibility={this.state.loginVisibility}\n                      />\n                      {this.state.currentAcc ? <Redirect to=\"/\" /> : \"\"}\n                    </Route>\n                    {this.state.currentAcc ? \"\" : <Redirect to=\"/login\" />}\n                    <Route path=\"/\">\n                      <Account\n                        accounts={this.state.accounts}\n                        currentAcc={this.state.currentAcc}\n                        handleRepayment={this.handleRepayment}\n                        lend={this.handleLend}\n                        uploadMoney={this.handleUploadMoney}\n                        logOut={this.handleLogOut}\n                      />\n                    </Route>\n                  </Switch>\n                </CSSTransition>\n              </TransitionGroup>\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Account.jsx",["72"],"import React from \"react\";\nimport \"./Account.scss\";\nimport \"./variables.scss\";\n\nimport \"./data\";\nimport { compareAsc, format } from \"date-fns\";\nimport Movements from \"./Movements\";\nimport Status from \"./Status\";\n// import NewOperator from \"./NewOperator\";\n// import Counter from \"./Counter\";\nlet timer;\n\nclass Account extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAcc: this.props.currentAcc === undefined ? false : true, /// <= this is not working\n      currentValue: \"\",\n      recepient: \"\",\n      lendAmount: \"\",\n      message: \"\",\n      amount: \"\",\n      repayAmount: \"\",\n      repayMessage: \"\",\n      repayRecepient: \"\",\n      time: 3000,\n    };\n    this.blockBtnText = this.blockBtnText.bind(this);\n    this.logoutTimer = this.logoutTimer.bind(this);\n  }\n\n  blockBtnText() {\n    const acc = this.props.accounts.find((acc) => {\n      return acc.username === this.state.accToBlock;\n    });\n    if (acc === undefined || acc.isBlocked === false) {\n      return \"block\";\n    } else {\n      return \"unblock\";\n    }\n  }\n  logoutTimer() {\n    if (this.state.time === 0) {\n      clearInterval(timer);\n      this.props.logOut();\n    }\n\n    // maybe we should do it from prevState?\n    this.setState({\n      time: this.state.time - 1,\n    });\n  }\n  componentDidMount() {\n    timer = setInterval(this.logoutTimer, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.logoutTimer);\n  }\n\n  render() {\n    let date = format(new Date(), \"dd/MM/yy\");\n    const min = String(Math.trunc(this.state.time / 60)).padStart(2, 0);\n    const sec = String(this.state.time % 60).padStart(2, 0);\n    return (\n      <div className=\"main\">\n        <Status\n          currentAcc={this.props.currentAcc}\n          date={date}\n          accounts={this.props.accounts}\n        />\n\n        {/* account component */}\n        <div className=\"accBody\">\n          <div className=\"ops\">\n            <div className=\"op op--lend\">\n              <h2>Lend money</h2>\n              <form\n                action=\"#\"\n                className=\"form form--lend\"\n                style={\n                  this.props.currentAcc === undefined\n                    ? { opacity: 0 }\n                    : this.props.currentAcc.isBlocked === true\n                    ? { opacity: 0 }\n                    : { opacity: 1 }\n                }\n              >\n                <div className=\"input-flex\">\n                  <input\n                    value={this.state.recepient}\n                    onChange={(e) => {\n                      this.setState({ recepient: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input form__input--forWho\"\n                  />\n\n                  <input\n                    value={this.state.lendAmount}\n                    onChange={(e) => {\n                      this.setState({ lendAmount: Number(e.target.value) });\n                    }}\n                    type=\"number\"\n                    className=\"form__input form__input--amount\"\n                  />\n                  <button\n                    className=\"form__btn form__btn--lend\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      if (this.state.message === \"\") {\n                        this.props.lend(\n                          this.props.currentAcc.username,\n                          this.state.recepient,\n                          this.state.lendAmount\n                        );\n                      } else {\n                        this.props.lend(\n                          this.props.currentAcc.username,\n                          this.state.recepient,\n                          this.state.lendAmount,\n                          this.state.message\n                        );\n                      }\n                      this.setState({\n                        recepient: \"\",\n                        lendAmount: \"\",\n                        message: \"\",\n                      });\n                    }}\n                  >\n                    &rarr;\n                  </button>\n                </div>\n                <div className=\"label-flex\">\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      For Who\n                    </label>\n                  </div>\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Amount\n                    </label>\n                  </div>\n                </div>\n                <input\n                  className=\"form__input form__input--message\"\n                  maxLength=\"50\"\n                  value={this.state.message}\n                  onChange={(e) => {\n                    this.setState({ message: e.target.value });\n                  }}\n                  type=\"text\"\n                />\n                <div>\n                  <div className=\"label-flex\">\n                    <label htmlFor=\"#\" className=\"form__label explanation\">\n                      Explanation\n                    </label>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div className=\"op op--upload\">\n              <h2>Upload money</h2>\n              <form\n                action=\"#\"\n                className=\"form form--borrow\"\n                style={\n                  this.props.currentAcc === undefined\n                    ? { opacity: 0 }\n                    : this.props.currentAcc.isBlocked === true\n                    ? { opacity: 0 }\n                    : { opacity: 1 }\n                }\n              >\n                <div className=\"input-flex\">\n                  {/* <input\n                    value={this.state.recepient}\n                    onChange={(e) => {\n                      this.setState({ recepient: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input\"\n                  /> */}\n\n                  <input\n                    value={this.state.amount}\n                    onChange={(e) => {\n                      this.setState({ amount: Number(e.target.value) });\n                    }}\n                    type=\"number\"\n                    className=\"form__input\"\n                  />\n                  <button\n                    className=\"form__btn form__btn--borrow\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      this.props.uploadMoney(\n                        this.props.currentAcc.username,\n                        this.state.amount\n                      );\n                      this.setState({\n                        recepient: \"\",\n                        amount: \"\",\n                      });\n                    }}\n                  >\n                    &rarr;\n                  </button>\n                </div>\n                <div className=\"label-flex\">\n                  {/* <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Account\n                    </label>\n                  </div> */}\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Amount\n                    </label>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div className=\"op op--repayment\">\n              <h2>Repay Debt</h2>\n              <form action=\"#\" className=\"form form--repayment\">\n                <div className=\"input-flex\">\n                  <input\n                    value={this.state.repayRecepient}\n                    onChange={(e) => {\n                      this.setState({ repayRecepient: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input form__input--for\"\n                  />\n\n                  <input\n                    value={this.state.repayAmount}\n                    onChange={(e) => {\n                      this.setState({ repayAmount: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input form__input--amount\"\n                  />\n                  <button\n                    className=\"form__btn form__btn--repayment\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      if (this.state.repayMessage === \"\") {\n                        this.props.handleRepayment(\n                          this.props.currentAcc.username,\n                          this.state.repayRecepient,\n                          this.state.repayAmount\n                        );\n                      } else {\n                        this.props.handleRepayment(\n                          this.props.currentAcc.username,\n                          this.state.repayRecepient,\n                          this.state.repayAmount,\n                          this.state.repayMessage\n                        );\n                      }\n                      this.setState({\n                        repayRecepient: \"\",\n                        repayAmount: \"\",\n                        repayMessage: \"\",\n                      });\n                    }}\n                  >\n                    &rarr;\n                  </button>\n                </div>\n                <div className=\"label-flex\">\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      For Who\n                    </label>\n                  </div>\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Amount\n                    </label>\n                  </div>\n                </div>\n                <input\n                  className=\"form__input form__input--message\"\n                  maxLength=\"50\"\n                  value={this.state.repayMessage}\n                  onChange={(e) => {\n                    this.setState({ repayMessage: e.target.value });\n                  }}\n                  type=\"text\"\n                />\n                <div>\n                  <div className=\"label-flex\">\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Explanation\n                    </label>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n          <div className=\"mov\">\n            {this.props.currentAcc?.movements.map((mov, i) => {\n              return (\n                <Movements\n                  recepient={mov.recepient}\n                  sender={mov.sender}\n                  transactionTyp={mov.transactionTyp}\n                  key={i + 1}\n                  i={i}\n                  type={mov.amount > 0 ? \"dep\" : \"withD\"}\n                  mov={mov.amount}\n                  message={mov.message}\n                  date={mov.date}\n                />\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"summeries\">\n          <p className=\"summeries__label\">in</p>\n          <p className=\"summeries__value summeries__value--in\">\n            {this.props.currentAcc?.movements\n              .map((mov) => {\n                return mov.amount > 0 ? mov.amount : 0;\n              })\n              .reduce((acc, curr) => acc + curr, 0)}\n            €\n          </p>\n          <p className=\"summeries__label\">out</p>\n          <p className=\"summeries__value summeries__value--out\">\n            {this.props.currentAcc?.movements\n              .map((mov) => {\n                return mov.amount < 0 ? mov.amount : 0;\n              })\n              .reduce((acc, curr) => acc + curr, 0)}\n            €\n          </p>\n          <p style={{ fontSize: \"20px\", color: \"#777\" }}>(Daily)</p>\n          <p className=\"timer\">\n            {min}:{sec}\n          </p>\n        </div>\n\n        {/* <NewOperator /> */}\n      </div>\n    );\n  }\n}\n\nexport default Account;\n","/Users/Barna/Documents/Code/household-account/src/data.js",["73"],"/Users/Barna/Documents/Code/household-account/src/Movements.jsx",[],"/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx",["74"],"import React from \"react\";\nimport \"./NewOperator.scss\";\n\nclass NewOperator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"ops\">\n        <div className=\"op op--borrow\">\n          <h2>What do you want to do ?</h2>\n          <div className=\"op__radioBtn\">\n            <input\n              type=\"radio\"\n              id=\"contactChoice1\"\n              name=\"contact\"\n              value=\"Upload\"\n            />\n            <label htmlFor=\"contactChoice2\">Upload</label>\n            <input\n              type=\"radio\"\n              id=\"contactChoice2\"\n              name=\"contact\"\n              value=\"Lend\"\n            />\n            <label htmlFor=\"contactChoice2\">Lend</label>\n\n            <input\n              type=\"radio\"\n              id=\"contactChoice3\"\n              name=\"contact\"\n              value=\"Casual\"\n            />\n            <label htmlFor=\"contactChoice3\">Casual</label>\n            <input\n              type=\"radio\"\n              id=\"contactChoice4\"\n              name=\"contact\"\n              value=\"Repayment\"\n            />\n            <label htmlFor=\"contactChoice4\">Repayment</label>\n          </div>\n\n          <form action=\"#\" className=\"form form--lend\">\n            <div className=\"input-flex\">\n              <input\n                value={this.state.recepient}\n                onChange={(e) => {\n                  this.setState({ recepient: e.target.value });\n                }}\n                type=\"text\"\n                className=\"form__input form__input--forWho\"\n              />\n\n              <input\n                value={this.state.lendAmount}\n                onChange={(e) => {\n                  this.setState({ lendAmount: Number(e.target.value) });\n                }}\n                type=\"number\"\n                className=\"form__input form__input--amount\"\n              />\n              <button\n                className=\"form__btn form__btn--lend\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  this.props.lend(\n                    this.props.currentAcc.username,\n                    this.state.recepient,\n                    this.state.lendAmount\n                  );\n                  this.setState({\n                    recepient: \"\",\n                    lendAmount: \"\",\n                  });\n                }}\n              >\n                &rarr;\n              </button>\n            </div>\n            <div className=\"label-flex\">\n              <div>\n                <label htmlFor=\"#\" className=\"form__label\">\n                  For Who\n                </label>\n              </div>\n              <div>\n                <label htmlFor=\"#\" className=\"form__label\">\n                  Amount\n                </label>\n              </div>\n            </div>\n            <input\n              className=\"form__input form__input--message\"\n              maxLength=\"50\"\n              value={this.state.message}\n              onChange={(e) => {\n                this.setState({ message: e.target.value });\n              }}\n              type=\"text\"\n            />\n            <div>\n              <div className=\"label-flex\">\n                <label htmlFor=\"#\" className=\"form__label\">\n                  Explanation\n                </label>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/Barna/Documents/Code/household-account/src/Overlay.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Status.jsx",[],["75","76"],"/Users/Barna/Documents/Code/household-account/src/Login.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Counter.jsx",["77","78"],"import React, { useEffect, useState } from \"react\";\nimport useCounter from \"./useCounter\";\n\nconst Counter = () => {\n  const [count, setCount] = useCounter();\n\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n};\n\nexport default Counter;\n",["79","80"],"/Users/Barna/Documents/Code/household-account/src/useCounter.js",[],"/Users/Barna/Documents/Code/household-account/src/updateAccsRepay.js",[],"/Users/Barna/Documents/Code/household-account/src/updateFunctions.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":7,"column":8,"nodeType":"87","messageId":"88","endLine":7,"endColumn":19},{"ruleId":"85","severity":1,"message":"89","line":6,"column":10,"nodeType":"87","messageId":"88","endLine":6,"endColumn":20},{"ruleId":"85","severity":1,"message":"89","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":4,"column":7,"nodeType":"87","messageId":"88","endLine":4,"endColumn":18},{"ruleId":"81","replacedBy":"90"},{"ruleId":"83","replacedBy":"91"},{"ruleId":"85","severity":1,"message":"92","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":26},{"ruleId":"85","severity":1,"message":"93","line":1,"column":28,"nodeType":"87","messageId":"88","endLine":1,"endColumn":36},{"ruleId":"81","replacedBy":"94"},{"ruleId":"83","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'NewOperator' is defined but never used.","Identifier","unusedVar","'compareAsc' is defined but never used.",["96"],["97"],"'useEffect' is defined but never used.","'useState' is defined but never used.",["96"],["97"],"no-global-assign","no-unsafe-negation"]