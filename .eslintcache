[{"/Users/Barna/Documents/Code/household-account/src/index.jsx":"1","/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js":"2","/Users/Barna/Documents/Code/household-account/src/App.jsx":"3","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx":"4","/Users/Barna/Documents/Code/household-account/src/Account.jsx":"5","/Users/Barna/Documents/Code/household-account/src/data.js":"6","/Users/Barna/Documents/Code/household-account/src/Movements.jsx":"7","/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx":"8","/Users/Barna/Documents/Code/household-account/src/Overlay.jsx":"9","/Users/Barna/Documents/Code/household-account/src/Status.jsx":"10","/Users/Barna/Documents/Code/household-account/src/Login.jsx":"11","/Users/Barna/Documents/Code/household-account/src/Counter.jsx":"12","/Users/Barna/Documents/Code/household-account/src/useCounter.js":"13","/Users/Barna/Documents/Code/household-account/src/updateCurrAcc.js":"14"},{"size":501,"mtime":1607885450289,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607885083550,"results":"17","hashOfConfig":"16"},{"size":13403,"mtime":1613055842311,"results":"18","hashOfConfig":"16"},{"size":1922,"mtime":1612646108656,"results":"19","hashOfConfig":"16"},{"size":12068,"mtime":1613057423337,"results":"20","hashOfConfig":"16"},{"size":1741,"mtime":1612646108658,"results":"21","hashOfConfig":"16"},{"size":1458,"mtime":1612646108651,"results":"22","hashOfConfig":"16"},{"size":3437,"mtime":1611325561041,"results":"23","hashOfConfig":"16"},{"size":720,"mtime":1612646108654,"results":"24","hashOfConfig":"16"},{"size":1410,"mtime":1613003277442,"results":"25","hashOfConfig":"16"},{"size":1973,"mtime":1612666656220,"results":"26","hashOfConfig":"16"},{"size":299,"mtime":1612646108650,"results":"27","hashOfConfig":"16"},{"size":306,"mtime":1612646108664,"results":"28","hashOfConfig":"16"},{"size":1352,"mtime":1613055604667,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1asedt4",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/Barna/Documents/Code/household-account/src/index.jsx",[],["62","63"],"/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js",[],"/Users/Barna/Documents/Code/household-account/src/App.jsx",["64"],"import \"./App.scss\";\nimport TopNav from \"./TopNav.jsx\";\nimport Account from \"./Account.jsx\";\nimport Overlay from \"./Overlay.jsx\";\nimport Login from \"./Login.jsx\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { accounts, date } from \"./data.js\";\nimport { updateCurrAcc } from \"./updateCurrAcc.js\";\nimport { compareAsc, format } from \"date-fns\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAcc: undefined,\n      accounts: accounts,\n      actuelDate: date,\n      overlayHidden: true,\n      overlayText: \"\",\n      loginVisibility: true,\n      isAnimationEnded: false,\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLend = this.handleLend.bind(this);\n    this.handleRepayment = this.handleRepayment.bind(this);\n    this.handleUploadMoney = this.handleUploadMoney.bind(this);\n    this.escFunction = this.escFunction.bind(this);\n    this.handleCloseOverlay = this.handleCloseOverlay.bind(this);\n    this.handleLogOut = this.handleLogOut.bind(this);\n  }\n  handleLogOut() {\n    this.setState({\n      loginVisibility: true,\n      currentAcc: undefined,\n      // isAnimationEnded: false,\n    });\n  }\n  handleLogin(username, pin) {\n    const valid = this.state.accounts.find((acc) => acc.username === username);\n    if (valid) {\n      this.setState({\n        currentAcc: this.state.accounts.find(\n          (acc) => acc.username === username\n        ),\n        loginVisibility: false,\n      });\n    }\n  }\n\n  handleUploadMoney(forAcc, amount, message = \"upload\") {\n    console.log(forAcc, amount);\n    if (amount <= 0) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid value\",\n      });\n    } else\n      this.setState((prev) => {\n        return {\n          currentAcc: {\n            ...prev.currentAcc,\n            movements: [\n              {\n                amount: amount,\n                date: date,\n                transactionTyp: \"upload\",\n                sender: forAcc,\n                recepient: forAcc,\n                message: message,\n              },\n              ...prev.currentAcc.movements,\n            ],\n            balance: prev.currentAcc.balance + amount,\n          },\n          accounts: this.state.accounts.map((acc) => {\n            if (acc.username === forAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: +amount,\n                    date: date,\n                    transactionTyp: \"upload\",\n                    sender: forAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance + amount,\n              };\n            }\n            return acc;\n          }),\n        };\n      });\n  }\n\n  handleCloseOverlay() {\n    this.setState({\n      overlayHidden: true,\n    });\n  }\n  escFunction(event) {\n    if (event.keyCode === 27) {\n      this.setState({\n        overlayHidden: true,\n      });\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.escFunction, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.escFunction, false);\n  }\n\n  handleRepayment(fromAcc, forAcc, amount, message = \"\") {\n    this.setState((prev) => {\n      return {\n        currentAcc: updateCurrAcc(\n          forAcc,\n          \"repayment\",\n          amount,\n          message,\n          prev,\n          date\n        ),\n        accounts: this.state.accounts.map((acc) => {\n          if (acc.username === fromAcc) {\n            return {\n              ...acc,\n              movements: [\n                {\n                  amount: -amount,\n                  date: date,\n                  transactionTyp: \"repayment\",\n                  sender: fromAcc,\n                  recepient: forAcc,\n                  message: message,\n                },\n                ...acc.movements,\n              ],\n              balance: acc.balance - amount,\n              debt: prev.currentAcc.debt.map((item, i) => {\n                if (item.to === forAcc) {\n                  if (item.value - amount === 0) {\n                    return prev.currentAcc.debt.splice(1, i);\n                  } else {\n                    return { value: item.value - amount, to: forAcc };\n                  }\n                } else {\n                  return item;\n                }\n              }),\n            };\n          }\n          if (acc.username === forAcc) {\n            return {\n              ...acc,\n              movements: [\n                {\n                  amount: Number(amount),\n                  date: date,\n                  transactionTyp: \"repayment\",\n                  sender: fromAcc,\n                  recepient: forAcc,\n                  message: message,\n                },\n                ...acc.movements,\n              ],\n              balance: acc.balance + Number(amount),\n              owed: acc.owed.map((item, i) => {\n                if (item.forWho === fromAcc) {\n                  if (item.value - amount === 0) {\n                    return acc.owed.splice(1, i);\n                  } else {\n                    return { value: item.value - amount, forWho: fromAcc };\n                  }\n                } else {\n                  return item;\n                }\n              }),\n            };\n          }\n          return acc;\n        }),\n      };\n    });\n  }\n\n  handleLend(fromAcc, forAcc, amount, message = \"dunno\") {\n    fromAcc = fromAcc.trim();\n    forAcc = forAcc.trim();\n    const valid = this.state.accounts.find((acc) => acc.username === forAcc);\n    let date = format(new Date(), \"dd/MM/yy\");\n    if (!forAcc && !amount) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"nincsenek adatok\",\n      });\n    } else if (amount > this.state.currentAcc.balance) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"nincsen eleg zseton\",\n      });\n    } else if (fromAcc === forAcc) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"magadnak nem tucc kuldeni\",\n      });\n    } else if (!valid) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid acc\",\n      });\n    } else if (amount <= 0) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid value\",\n      });\n    } else {\n      this.setState((prev) => {\n        //////////owed array contain the acc who you are lending to ////////////////////\n        if (prev.currentAcc.owed.some((item) => item.forWho === forAcc)) {\n          return {\n            currentAcc: updateCurrAcc(\n              forAcc,\n              \"lend\",\n              amount,\n              message,\n              prev,\n              date\n            ),\n            accounts: this.state.accounts.map((acc) => {\n              if (acc.username === fromAcc) {\n                return {\n                  ...acc,\n                  movements: [\n                    {\n                      amount: -amount,\n                      date: date,\n                      transactionTyp: \"lend\",\n                      sender: fromAcc,\n                      recepient: forAcc,\n                      message: message,\n                    },\n                    ...acc.movements,\n                  ],\n                  balance: acc.balance - amount,\n                  // owed is an array of lended money\n                  owed: acc.owed.map((item) => {\n                    if (item.forWho === forAcc) {\n                      return { value: item.value + amount, forWho: forAcc };\n                    } else {\n                      return item;\n                    }\n                  }),\n                  // [{ value: amount, forWho: forAcc }, ...acc.owed],\n                };\n              }\n              if (acc.username === forAcc) {\n                return {\n                  ...acc,\n                  movements: [\n                    {\n                      amount: amount,\n                      date: date,\n                      transactionTyp: \"borrow\",\n                      sender: fromAcc,\n                      recepient: forAcc,\n                      message: message,\n                    },\n                    ...acc.movements,\n                  ],\n                  balance: acc.balance + amount,\n                  // ddebt is an array about the money that the given account got\n                  debt: acc.debt.map((item) => {\n                    if (item.to === fromAcc) {\n                      return { value: item.value + amount, to: fromAcc };\n                    } else {\n                      return item;\n                    }\n                  }),\n                  // [{ value: amount, to: fromAcc }, ...acc.debt],\n                };\n              }\n              return acc;\n            }),\n          };\n        }\n\n        /////////owed array doesn't contain the acc who you are lending to //////////////////\n        return {\n          currentAcc: {\n            ...prev.currentAcc,\n            movements: [\n              {\n                amount: -amount,\n                date: date,\n                transactionTyp: \"lend\",\n                sender: fromAcc,\n                recepient: forAcc,\n                message: message,\n              },\n              ...prev.currentAcc.movements,\n            ],\n            balance: prev.currentAcc.balance - amount,\n            owed: [{ value: amount, forWho: forAcc }, ...prev.currentAcc.owed],\n\n            // ha olyannak adsz kolcson aki neked tartozik=> ne keruljon bele owed-ba\n\n            debt: prev.currentAcc.debt.map((item) => {\n              if (item.to === forAcc) {\n                return { value: item.value - amount, to: forAcc };\n              } else {\n                return item;\n              }\n            }),\n          },\n          accounts: this.state.accounts.map((acc) => {\n            if (acc.username === fromAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: -amount,\n                    date: date,\n                    transactionTyp: \"lend\",\n                    sender: fromAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance - amount,\n                owed: [{ value: amount, forWho: forAcc }, ...acc.owed],\n              };\n            }\n            if (acc.username === forAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: amount,\n                    date: date,\n                    transactionTyp: \"borrow\",\n                    sender: fromAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance + amount,\n                debt: [{ value: amount, to: fromAcc }, ...acc.debt],\n              };\n            }\n            return acc;\n          }),\n        };\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Overlay\n            overlayText={this.state.overlayText}\n            hidden={this.state.overlayHidden}\n            handleCloseOverlay={this.handleCloseOverlay}\n          />\n          <TopNav\n            currentAcc={this.state.currentAcc}\n            login={this.handleLogin}\n            logOutBtnVisibility={this.state.loginVisibility}\n            logOut={this.handleLogOut}\n          />\n          <Route\n            render={({ location }) => (\n              <TransitionGroup>\n                <CSSTransition\n                  classNames=\"login-transition\"\n                  timeout={1000}\n                  key={location.key}\n                  onExited={() => this.setState({ isAnimationEnded: true })}\n                  onEntered={() => this.setState({ isAnimationEnded: false })}\n                >\n                  <Switch location={location}>\n                    <Route path=\"/login\">\n                      <Login\n                        isAnimationEnded={this.state.isAnimationEnded}\n                        currentAcc={this.state.currentAcc}\n                        login={this.handleLogin}\n                        loginVisibility={this.state.loginVisibility}\n                      />\n                      {this.state.currentAcc ? <Redirect to=\"/\" /> : \"\"}\n                    </Route>\n                    {this.state.currentAcc ? \"\" : <Redirect to=\"/login\" />}\n                    <Route path=\"/\">\n                      <Account\n                        accounts={this.state.accounts}\n                        currentAcc={this.state.currentAcc}\n                        handleRepayment={this.handleRepayment}\n                        lend={this.handleLend}\n                        uploadMoney={this.handleUploadMoney}\n                        logOut={this.handleLogOut}\n                      />\n                    </Route>\n                  </Switch>\n                </CSSTransition>\n              </TransitionGroup>\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Account.jsx",["65"],"/Users/Barna/Documents/Code/household-account/src/data.js",[],"/Users/Barna/Documents/Code/household-account/src/Movements.jsx",[],"/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx",[],["66","67"],"/Users/Barna/Documents/Code/household-account/src/Overlay.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Status.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Login.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Counter.jsx",["68","69"],"import React, { useEffect, useState } from \"react\";\nimport useCounter from \"./useCounter\";\n\nconst Counter = () => {\n  const [count, setCount] = useCounter();\n\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n};\n\nexport default Counter;\n","/Users/Barna/Documents/Code/household-account/src/useCounter.js",[],"/Users/Barna/Documents/Code/household-account/src/updateCurrAcc.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":15,"column":10,"nodeType":"76","messageId":"77","endLine":15,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":6,"column":10,"nodeType":"76","messageId":"77","endLine":6,"endColumn":20},{"ruleId":"70","replacedBy":"78"},{"ruleId":"72","replacedBy":"79"},{"ruleId":"74","severity":1,"message":"80","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"81","line":1,"column":28,"nodeType":"76","messageId":"77","endLine":1,"endColumn":36},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'compareAsc' is defined but never used.","Identifier","unusedVar",["82"],["83"],"'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]