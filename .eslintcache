[{"/Users/Barna/Documents/Code/household-account/src/index.jsx":"1","/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js":"2","/Users/Barna/Documents/Code/household-account/src/App.jsx":"3","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx":"4","/Users/Barna/Documents/Code/household-account/src/Account.jsx":"5","/Users/Barna/Documents/Code/household-account/src/data.js":"6","/Users/Barna/Documents/Code/household-account/src/Movements.jsx":"7","/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx":"8","/Users/Barna/Documents/Code/household-account/src/Overlay.jsx":"9","/Users/Barna/Documents/Code/household-account/src/Status.jsx":"10","/Users/Barna/Documents/Code/household-account/src/Login.jsx":"11","/Users/Barna/Documents/Code/household-account/src/Counter.jsx":"12","/Users/Barna/Documents/Code/household-account/src/useCounter.js":"13","/Users/Barna/Documents/Code/household-account/src/updateAccsRepay.js":"14","/Users/Barna/Documents/Code/household-account/src/updateFunctions.js":"15"},{"size":501,"mtime":1607885450289,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1607885083550,"results":"18","hashOfConfig":"17"},{"size":8848,"mtime":1613333732831,"results":"19","hashOfConfig":"17"},{"size":1922,"mtime":1612646108656,"results":"20","hashOfConfig":"17"},{"size":12130,"mtime":1613390979881,"results":"21","hashOfConfig":"17"},{"size":1895,"mtime":1613164555792,"results":"22","hashOfConfig":"17"},{"size":987,"mtime":1613159979736,"results":"23","hashOfConfig":"17"},{"size":3437,"mtime":1611325561041,"results":"24","hashOfConfig":"17"},{"size":720,"mtime":1612646108654,"results":"25","hashOfConfig":"17"},{"size":1378,"mtime":1613134496456,"results":"26","hashOfConfig":"17"},{"size":1973,"mtime":1612666656220,"results":"27","hashOfConfig":"17"},{"size":299,"mtime":1612646108650,"results":"28","hashOfConfig":"17"},{"size":306,"mtime":1612646108664,"results":"29","hashOfConfig":"17"},{"size":1457,"mtime":1613394453235,"results":"30","hashOfConfig":"17"},{"size":3668,"mtime":1613394520848,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1asedt4",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Barna/Documents/Code/household-account/src/index.jsx",[],["67","68"],"/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js",[],"/Users/Barna/Documents/Code/household-account/src/App.jsx",["69"],"import \"./App.scss\";\nimport TopNav from \"./TopNav.jsx\";\nimport Account from \"./Account.jsx\";\nimport Overlay from \"./Overlay.jsx\";\nimport Login from \"./Login.jsx\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { accounts, date } from \"./data.js\";\nimport {\n  updateCurrAcc,\n  deleteOrDecreaseDate,\n  updateAccsLend,\n} from \"./updateFunctions.js\";\nimport { updateAccsRepay } from \"./updateAccsRepay.js\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAcc: undefined,\n      accounts: accounts,\n      actuelDate: date,\n      overlayHidden: true,\n      overlayText: \"\",\n      loginVisibility: true,\n      isAnimationEnded: false,\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLend = this.handleLend.bind(this);\n    this.handleRepayment = this.handleRepayment.bind(this);\n    this.handleUploadMoney = this.handleUploadMoney.bind(this);\n    this.escFunction = this.escFunction.bind(this);\n    this.handleCloseOverlay = this.handleCloseOverlay.bind(this);\n    this.handleLogOut = this.handleLogOut.bind(this);\n    this.validationForTransaction = this.validationForTransaction.bind(this);\n  }\n  validationForTransaction(state, fromAcc, forAcc, amount, currentAcc) {\n    // - WhiteSpace\n    fromAcc = fromAcc.trim();\n    forAcc = forAcc.trim();\n    // creating \"valid\" variable to validationForTransaction\n    const valid = state.accounts.find((acc) => acc.username === forAcc);\n    if (!forAcc && !amount) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"Missed dates\",\n      });\n      return false;\n    } else if (amount > state.currentAcc.balance) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"You don't have enough money!\",\n      });\n      return false;\n    } else if (fromAcc === forAcc) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"You can't sent money for Yourself!\",\n      });\n      return false;\n    } else if (!valid) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"Invalid userName\",\n      });\n      return false;\n    } else if (amount <= 0) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"Invalid value\",\n      });\n      return false;\n    }\n    return true;\n  }\n\n  handleLogOut() {\n    this.setState({\n      loginVisibility: true,\n      currentAcc: undefined,\n      // isAnimationEnded: false,\n    });\n  }\n  handleLogin(username, pin) {\n    const valid = this.state.accounts.find((acc) => acc.username === username);\n    if (valid) {\n      this.setState({\n        currentAcc: this.state.accounts.find(\n          (acc) => acc.username === username\n        ),\n        loginVisibility: false,\n      });\n    }\n  }\n\n  handleUploadMoney(forAcc, amount, message = \"upload\") {\n    console.log(forAcc, amount);\n    if (amount <= 0) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid value\",\n      });\n    } else\n      this.setState((prev) => {\n        return {\n          currentAcc: {\n            ...prev.currentAcc,\n            movements: [\n              {\n                amount: amount,\n                date: date,\n                transactionTyp: \"upload\",\n                sender: forAcc,\n                recepient: forAcc,\n                message: message,\n              },\n              ...prev.currentAcc.movements,\n            ],\n            balance: prev.currentAcc.balance + amount,\n          },\n          accounts: this.state.accounts.map((acc) => {\n            if (acc.username === forAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: +amount,\n                    date: date,\n                    transactionTyp: \"upload\",\n                    sender: forAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance + amount,\n              };\n            }\n            return acc;\n          }),\n        };\n      });\n  }\n\n  handleCloseOverlay() {\n    this.setState({\n      overlayHidden: true,\n    });\n  }\n  escFunction(event) {\n    if (event.keyCode === 27) {\n      this.setState({\n        overlayHidden: true,\n      });\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.escFunction, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.escFunction, false);\n  }\n\n  handleRepayment(fromAcc, forAcc, amount, message = \"repayment\") {\n    const isValid = this.validationForTransaction(\n      this.state,\n      fromAcc,\n      forAcc,\n      amount\n    );\n    if (isValid)\n      this.setState((prev) => {\n        return {\n          currentAcc: updateCurrAcc(\n            forAcc,\n            \"repayment\",\n            amount,\n            message,\n            prev,\n            date\n          ),\n          accounts: updateAccsRepay(\n            fromAcc,\n            forAcc,\n            \"repayment\",\n            amount,\n            message,\n            this.state,\n            prev,\n            date\n          ),\n        };\n      });\n  }\n\n  handleLend(fromAcc, forAcc, amount, message = \"dunno\") {\n    // validationForTransaction\n    const isValid = this.validationForTransaction(\n      this.state,\n      fromAcc,\n      forAcc,\n      amount\n    );\n    if (isValid) {\n      this.setState((prev) => {\n        //////////lended array contain the acc who you are lending to /////////////\n        const isAccExistsInLended = prev.currentAcc.lended.some(\n          (item) => item.to === forAcc\n        );\n        console.log(isAccExistsInLended);\n        if (isAccExistsInLended) {\n          return {\n            currentAcc: updateCurrAcc(\n              forAcc,\n              \"lend\",\n              -amount,\n              message,\n              prev,\n              date,\n              isAccExistsInLended\n            ),\n            accounts: updateAccsLend(\n              this.state.accounts,\n              fromAcc,\n              forAcc,\n              amount,\n              message,\n              date,\n              isAccExistsInLended\n            ),\n          };\n        }\n        /////////lended array doesn't contain the acc who you are lending to ///////\n        return {\n          currentAcc: updateCurrAcc(\n            forAcc,\n            \"lend\",\n            -amount,\n            message,\n            prev,\n            date,\n            isAccExistsInLended\n          ),\n          accounts: updateAccsLend(\n            this.state.accounts,\n            fromAcc,\n            forAcc,\n            amount,\n            message,\n            date,\n            isAccExistsInLended\n          ),\n        };\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Overlay\n            overlayText={this.state.overlayText}\n            hidden={this.state.overlayHidden}\n            handleCloseOverlay={this.handleCloseOverlay}\n          />\n          <TopNav\n            currentAcc={this.state.currentAcc}\n            login={this.handleLogin}\n            logOutBtnVisibility={this.state.loginVisibility}\n            logOut={this.handleLogOut}\n          />\n          <Route\n            render={({ location }) => (\n              <TransitionGroup>\n                <CSSTransition\n                  classNames=\"login-transition\"\n                  timeout={1000}\n                  key={location.key}\n                >\n                  <Switch location={location}>\n                    <Route path=\"/login\">\n                      <Login\n                        isAnimationEnded={this.state.isAnimationEnded}\n                        currentAcc={this.state.currentAcc}\n                        login={this.handleLogin}\n                        loginVisibility={this.state.loginVisibility}\n                      />\n                      {this.state.currentAcc ? <Redirect to=\"/\" /> : \"\"}\n                    </Route>\n                    {this.state.currentAcc ? \"\" : <Redirect to=\"/login\" />}\n                    <Route path=\"/\">\n                      <Account\n                        accounts={this.state.accounts}\n                        currentAcc={this.state.currentAcc}\n                        handleRepayment={this.handleRepayment}\n                        lend={this.handleLend}\n                        uploadMoney={this.handleUploadMoney}\n                        logOut={this.handleLogOut}\n                      />\n                    </Route>\n                  </Switch>\n                </CSSTransition>\n              </TransitionGroup>\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Account.jsx",["70"],"/Users/Barna/Documents/Code/household-account/src/data.js",["71"],"import { compareAsc, format } from \"date-fns\";\n\n/// implement actuel Date\n// Date formatting with date-fns\nexport let date = format(new Date(), \"dd/MM/yy\");\n// const today = new Date();\n// export let date = today.getMonth() + 1 + \"-\" + today.getDate();\n//////////////////\n// Data\nexport const account1 = {\n    owner: 'John Miller',\n    balance: 10000,\n    movements: [{\n        amount: -200,\n        date: date,\n        transactionTyp: \"casual\",\n        sender: 'jm',\n        recepient: 'km',\n        message: `i don't know`\n    }],\n    debt: [],\n    lended: [],\n\n\n};\n\nexport const account2 = {\n    owner: 'Teresa Miller',\n    balance: 7000,\n    movements: [],\n    debt: [],\n    lended: [],\n};\n\nexport const account3 = {\n    owner: 'Steven Miller',\n    balance: 0,\n    movements: [],\n    isBlocked: false,\n    debt: [],\n    lended: [],\n};\n\nexport const account4 = {\n    owner: 'Katie Miller',\n    balance: 0,\n    movements: [{\n        amount: 200,\n        date: date,\n        transactionTyp: \"casual\",\n        sender: 'jm',\n        recepient: 'km',\n        message: `i don't know`\n    }],\n    isBlocked: false,\n    debt: [],\n    lended: [],\n\n};\nexport const testAcc = {\n    owner: 'Test Person',\n    username: \"tp\",\n    balance: [5000],\n    movements: [{\n        amount: -200,\n        time: \"date\",\n        transactionTyp: \"lend\",\n        sender: 'jm',\n        recepient: 'km',\n        message: `i don't know`\n    }, {\n        amount: 400,\n        time: \"12-12\",\n        transactionTyp: \"borrow\",\n        sender: 'tm',\n        recepient: 'sm',\n        message: `football`\n    }],\n}\n\n\n\nexport const accounts = [account1, account2, account3, account4];\n// Create username\n\nconst createUsername = function(accs) {\n    accs.forEach(acc => {\n        acc.username = acc.owner\n            .toLowerCase().split(' ').map(item => item[0]).join('')\n    });\n}\ncreateUsername(accounts);\nconsole.log(accounts)","/Users/Barna/Documents/Code/household-account/src/Movements.jsx",[],"/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx",[],["72","73"],"/Users/Barna/Documents/Code/household-account/src/Overlay.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Status.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Login.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Counter.jsx",["74","75"],"import React, { useEffect, useState } from \"react\";\nimport useCounter from \"./useCounter\";\n\nconst Counter = () => {\n  const [count, setCount] = useCounter();\n\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n};\n\nexport default Counter;\n","/Users/Barna/Documents/Code/household-account/src/useCounter.js",[],"/Users/Barna/Documents/Code/household-account/src/updateAccsRepay.js",[],"/Users/Barna/Documents/Code/household-account/src/updateFunctions.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":16,"column":3,"nodeType":"82","messageId":"83","endLine":16,"endColumn":23},{"ruleId":"80","severity":1,"message":"84","line":6,"column":10,"nodeType":"82","messageId":"83","endLine":6,"endColumn":20},{"ruleId":"80","severity":1,"message":"84","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":20},{"ruleId":"76","replacedBy":"85"},{"ruleId":"78","replacedBy":"86"},{"ruleId":"80","severity":1,"message":"87","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":26},{"ruleId":"80","severity":1,"message":"88","line":1,"column":28,"nodeType":"82","messageId":"83","endLine":1,"endColumn":36},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'deleteOrDecreaseDate' is defined but never used.","Identifier","unusedVar","'compareAsc' is defined but never used.",["89"],["90"],"'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]