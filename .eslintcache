[{"/Users/Barna/Documents/Code/household-account/src/index.jsx":"1","/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js":"2","/Users/Barna/Documents/Code/household-account/src/App.jsx":"3","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx":"4","/Users/Barna/Documents/Code/household-account/src/Account.jsx":"5","/Users/Barna/Documents/Code/household-account/src/data.js":"6","/Users/Barna/Documents/Code/household-account/src/Movements.jsx":"7","/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx":"8","/Users/Barna/Documents/Code/household-account/src/Overlay.jsx":"9","/Users/Barna/Documents/Code/household-account/src/Status.jsx":"10","/Users/Barna/Documents/Code/household-account/src/Login.jsx":"11","/Users/Barna/Documents/Code/household-account/src/Counter.jsx":"12","/Users/Barna/Documents/Code/household-account/src/useCounter.js":"13","/Users/Barna/Documents/Code/household-account/src/updateCurrAcc.js":"14"},{"size":501,"mtime":1607885450289,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1607885083550,"results":"17","hashOfConfig":"16"},{"size":13403,"mtime":1613055842311,"results":"18","hashOfConfig":"16"},{"size":1922,"mtime":1612646108656,"results":"19","hashOfConfig":"16"},{"size":12316,"mtime":1613050913019,"results":"20","hashOfConfig":"16"},{"size":1741,"mtime":1612646108658,"results":"21","hashOfConfig":"16"},{"size":1458,"mtime":1612646108651,"results":"22","hashOfConfig":"16"},{"size":3437,"mtime":1611325561041,"results":"23","hashOfConfig":"16"},{"size":720,"mtime":1612646108654,"results":"24","hashOfConfig":"16"},{"size":1410,"mtime":1613003277442,"results":"25","hashOfConfig":"16"},{"size":1973,"mtime":1612666656220,"results":"26","hashOfConfig":"16"},{"size":299,"mtime":1612646108650,"results":"27","hashOfConfig":"16"},{"size":306,"mtime":1612646108664,"results":"28","hashOfConfig":"16"},{"size":1352,"mtime":1613055604667,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1asedt4",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/Barna/Documents/Code/household-account/src/index.jsx",[],["62","63"],"/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js",[],"/Users/Barna/Documents/Code/household-account/src/App.jsx",["64"],"/Users/Barna/Documents/Code/household-account/src/TopNav.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Account.jsx",["65"],"import React from \"react\";\nimport \"./Account.scss\";\nimport \"./variables.scss\";\n\nimport \"./data\";\nimport { compareAsc, format } from \"date-fns\";\nimport Movements from \"./Movements\";\nimport Status from \"./Status\";\n// import NewOperator from \"./NewOperator\";\n// import Counter from \"./Counter\";\nlet timer;\n\nclass Account extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAcc: this.props.currentAcc === undefined ? false : true, /// <= this is not working\n      currentValue: \"\",\n      recepient: \"\",\n      lendAmount: \"\",\n      message: \"\",\n      amount: \"\",\n      repayAmount: \"\",\n      repayMessage: \"\",\n      repayRecepient: \"\",\n      time: 300,\n    };\n    this.blockBtnText = this.blockBtnText.bind(this);\n    this.logoutTimer = this.logoutTimer.bind(this);\n  }\n\n  blockBtnText() {\n    const acc = this.props.accounts.find((acc) => {\n      return acc.username === this.state.accToBlock;\n    });\n    if (acc === undefined || acc.isBlocked === false) {\n      return \"block\";\n    } else {\n      return \"unblock\";\n    }\n  }\n  logoutTimer() {\n    if (this.state.time === 0) {\n      clearInterval(timer);\n      console.log(\"vege\");\n      this.props.logOut();\n    }\n    this.setState({\n      time: this.state.time - 1,\n    });\n  }\n  componentDidMount() {\n    timer = setInterval(this.logoutTimer, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.logoutTimer);\n  }\n\n  render() {\n    let date = format(new Date(), \"dd/MM/yy\");\n    const min = String(Math.trunc(this.state.time / 60)).padStart(2, 0);\n    const sec = String(this.state.time % 60).padStart(2, 0);\n    return (\n      <div className=\"main\">\n        <Status\n          currentAcc={this.props.currentAcc}\n          date={date}\n          accounts={this.props.accounts}\n        />\n\n        {/* account component */}\n        <div className=\"accBody\">\n          <div className=\"ops\">\n            <div className=\"op op--lend\">\n              <h2>Lend money</h2>\n              <form\n                action=\"#\"\n                className=\"form form--lend\"\n                style={\n                  this.props.currentAcc === undefined\n                    ? { opacity: 0 }\n                    : this.props.currentAcc.isBlocked === true\n                    ? { opacity: 0 }\n                    : { opacity: 1 }\n                }\n              >\n                <div className=\"input-flex\">\n                  <input\n                    value={this.state.recepient}\n                    onChange={(e) => {\n                      this.setState({ recepient: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input form__input--forWho\"\n                  />\n\n                  <input\n                    value={this.state.lendAmount}\n                    onChange={(e) => {\n                      this.setState({ lendAmount: Number(e.target.value) });\n                    }}\n                    type=\"number\"\n                    className=\"form__input form__input--amount\"\n                  />\n                  <button\n                    className=\"form__btn form__btn--lend\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      if (this.state.message === \"\") {\n                        this.props.lend(\n                          this.props.currentAcc.username,\n                          this.state.recepient,\n                          this.state.lendAmount\n                        );\n                      } else {\n                        this.props.lend(\n                          this.props.currentAcc.username,\n                          this.state.recepient,\n                          this.state.lendAmount,\n                          this.state.message\n                        );\n                      }\n                      this.setState({\n                        recepient: \"\",\n                        lendAmount: \"\",\n                        message: \"\",\n                      });\n                    }}\n                  >\n                    &rarr;\n                  </button>\n                </div>\n                <div className=\"label-flex\">\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      For Who\n                    </label>\n                  </div>\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Amount\n                    </label>\n                  </div>\n                </div>\n                <input\n                  className=\"form__input form__input--message\"\n                  maxLength=\"50\"\n                  value={this.state.message}\n                  onChange={(e) => {\n                    this.setState({ message: e.target.value });\n                  }}\n                  type=\"text\"\n                />\n                <div>\n                  <div className=\"label-flex\">\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Explanation\n                    </label>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div className=\"op op--upload\">\n              <h2>Upload money</h2>\n              <form\n                action=\"#\"\n                className=\"form form--borrow\"\n                style={\n                  this.props.currentAcc === undefined\n                    ? { opacity: 0 }\n                    : this.props.currentAcc.isBlocked === true\n                    ? { opacity: 0 }\n                    : { opacity: 1 }\n                }\n              >\n                <div className=\"input-flex\">\n                  {/* <input\n                    value={this.state.recepient}\n                    onChange={(e) => {\n                      this.setState({ recepient: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input\"\n                  /> */}\n\n                  <input\n                    value={this.state.amount}\n                    onChange={(e) => {\n                      this.setState({ amount: Number(e.target.value) });\n                    }}\n                    type=\"number\"\n                    className=\"form__input\"\n                  />\n                  <button\n                    className=\"form__btn form__btn--borrow\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      this.props.uploadMoney(\n                        this.props.currentAcc.username,\n                        this.state.amount\n                      );\n                      this.setState({\n                        recepient: \"\",\n                        amount: \"\",\n                      });\n                    }}\n                  >\n                    &rarr;\n                  </button>\n                </div>\n                <div className=\"label-flex\">\n                  {/* <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Account\n                    </label>\n                  </div> */}\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Amount\n                    </label>\n                  </div>\n                </div>\n              </form>\n            </div>\n\n            {this.props.currentAcc !== undefined ? (\n              <div className=\"op op--repayment\">\n                <h2>Repay Debt</h2>\n                <form action=\"#\" className=\"form form--repayment\">\n                  <div className=\"input-flex\">\n                    <input\n                      value={this.state.repayRecepient}\n                      onChange={(e) => {\n                        this.setState({ repayRecepient: e.target.value });\n                      }}\n                      type=\"text\"\n                      className=\"form__input form__input--for\"\n                    />\n\n                    <input\n                      value={this.state.repayAmount}\n                      onChange={(e) => {\n                        this.setState({ repayAmount: e.target.value });\n                      }}\n                      type=\"text\"\n                      className=\"form__input form__input--amount\"\n                    />\n                    <button\n                      className=\"form__btn form__btn--repayment\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        if (this.state.message === \"\") {\n                          this.props.handleRepayment(\n                            this.props.currentAcc.username,\n                            this.state.repayRecepient,\n                            this.state.repayAmount\n                          );\n                        } else {\n                          this.props.handleRepayment(\n                            this.props.currentAcc.username,\n                            this.state.repayRecepient,\n                            this.state.repayAmount,\n                            this.state.repayMessage\n                          );\n                        }\n                        this.setState({\n                          repayRecepient: \"\",\n                          repayAmount: \"\",\n                          repayMessage: \"\",\n                        });\n                      }}\n                    >\n                      &rarr;\n                    </button>\n                  </div>\n                  <div className=\"label-flex\">\n                    <div>\n                      <label htmlFor=\"#\" className=\"form__label\">\n                        For Who\n                      </label>\n                    </div>\n                    <div>\n                      <label htmlFor=\"#\" className=\"form__label\">\n                        Amount\n                      </label>\n                    </div>\n                  </div>\n                  <input\n                    className=\"form__input form__input--message\"\n                    maxLength=\"50\"\n                    value={this.state.repayMessage}\n                    onChange={(e) => {\n                      this.setState({ repayMessage: e.target.value });\n                    }}\n                    type=\"text\"\n                  />\n                  <div>\n                    <div className=\"label-flex\">\n                      <label htmlFor=\"#\" className=\"form__label\">\n                        Explanation\n                      </label>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n          <div className=\"mov\">\n            {this.props.currentAcc?.movements.map((mov, i) => {\n              return (\n                <Movements\n                  recepient={mov.recepient}\n                  transactionTyp={mov.transactionTyp}\n                  key={i + 1}\n                  i={i}\n                  type={mov.amount > 0 ? \"dep\" : \"withD\"}\n                  mov={mov.amount}\n                  message={mov.message}\n                  date={mov.date}\n                />\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"summeries\">\n          <p className=\"summeries__label\">in</p>\n          <p className=\"summeries__value summeries__value--in\">\n            {/* {this.props.currentAcc?.balance} */}\n            {this.props.currentAcc?.movements\n              .map((mov) => {\n                return mov.amount > 0 ? mov.amount : 0;\n              })\n              .reduce((acc, curr) => acc + curr, 0)}\n            €\n          </p>\n          <p className=\"summeries__label\">out</p>\n          <p className=\"summeries__value summeries__value--out\">\n            {this.props.currentAcc?.movements\n              .map((mov) => {\n                return mov.amount < 0 ? mov.amount : 0;\n              })\n              .reduce((acc, curr) => acc + curr, 0)}\n            {/* {this.props.currentAcc?.movements\n              .filter((mov) => mov < 0)\n              .reduce((acc, curr) => acc + curr, 0)} */}\n            €\n          </p>\n          <p style={{ fontSize: \"20px\", color: \"#777\" }}>(Daily)</p>\n          <p className=\"timer\">\n            {min}:{sec}\n          </p>\n        </div>\n\n        {/* <NewOperator /> */}\n      </div>\n    );\n  }\n}\n\nexport default Account;\n","/Users/Barna/Documents/Code/household-account/src/data.js",[],"/Users/Barna/Documents/Code/household-account/src/Movements.jsx",[],"/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx",[],["66","67"],"/Users/Barna/Documents/Code/household-account/src/Overlay.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Status.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Login.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Counter.jsx",["68","69"],"import React, { useEffect, useState } from \"react\";\nimport useCounter from \"./useCounter\";\n\nconst Counter = () => {\n  const [count, setCount] = useCounter();\n\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n};\n\nexport default Counter;\n","/Users/Barna/Documents/Code/household-account/src/useCounter.js",[],"/Users/Barna/Documents/Code/household-account/src/updateCurrAcc.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":15,"column":10,"nodeType":"76","messageId":"77","endLine":15,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":6,"column":10,"nodeType":"76","messageId":"77","endLine":6,"endColumn":20},{"ruleId":"70","replacedBy":"78"},{"ruleId":"72","replacedBy":"79"},{"ruleId":"74","severity":1,"message":"80","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"81","line":1,"column":28,"nodeType":"76","messageId":"77","endLine":1,"endColumn":36},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'compareAsc' is defined but never used.","Identifier","unusedVar",["82"],["83"],"'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]