[{"/Users/Barna/Documents/Code/household-account/src/index.jsx":"1","/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js":"2","/Users/Barna/Documents/Code/household-account/src/App.jsx":"3","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx":"4","/Users/Barna/Documents/Code/household-account/src/Account.jsx":"5","/Users/Barna/Documents/Code/household-account/src/data.js":"6","/Users/Barna/Documents/Code/household-account/src/Movements.jsx":"7","/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx":"8","/Users/Barna/Documents/Code/household-account/src/Overlay.jsx":"9","/Users/Barna/Documents/Code/household-account/src/Status.jsx":"10","/Users/Barna/Documents/Code/household-account/src/Login.jsx":"11","/Users/Barna/Documents/Code/household-account/src/Counter.jsx":"12","/Users/Barna/Documents/Code/household-account/src/useCounter.js":"13"},{"size":501,"mtime":1607885450289,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607885083550,"results":"16","hashOfConfig":"15"},{"size":11426,"mtime":1612047350245,"results":"17","hashOfConfig":"15"},{"size":1922,"mtime":1611086834184,"results":"18","hashOfConfig":"15"},{"size":10358,"mtime":1612032094835,"results":"19","hashOfConfig":"15"},{"size":1741,"mtime":1610893877678,"results":"20","hashOfConfig":"15"},{"size":1458,"mtime":1609958409948,"results":"21","hashOfConfig":"15"},{"size":3437,"mtime":1611325561041,"results":"22","hashOfConfig":"15"},{"size":720,"mtime":1610566363321,"results":"23","hashOfConfig":"15"},{"size":1093,"mtime":1610982519645,"results":"24","hashOfConfig":"15"},{"size":1764,"mtime":1611591648656,"results":"25","hashOfConfig":"15"},{"size":299,"mtime":1612038187574,"results":"26","hashOfConfig":"15"},{"size":306,"mtime":1612033517994,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1asedt4",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/Barna/Documents/Code/household-account/src/index.jsx",[],["59","60"],"/Users/Barna/Documents/Code/household-account/src/reportWebVitals.js",[],"/Users/Barna/Documents/Code/household-account/src/App.jsx",["61"],"import \"./App.scss\";\nimport TopNav from \"./TopNav.jsx\";\nimport Account from \"./Account.jsx\";\nimport Overlay from \"./Overlay.jsx\";\nimport Login from \"./Login.jsx\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { accounts, date } from \"./data.js\";\nimport { compareAsc, format } from \"date-fns\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAcc: undefined,\n      accounts: accounts,\n      actuelDate: date,\n      overlayHidden: true,\n      overlayText: \"\",\n      loginVisibility: true,\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLend = this.handleLend.bind(this);\n    this.handleBlock = this.handleBlock.bind(this);\n    this.handleUploadMoney = this.handleUploadMoney.bind(this);\n    this.escFunction = this.escFunction.bind(this);\n    this.handleCloseOverlay = this.handleCloseOverlay.bind(this);\n    this.handleLogOut = this.handleLogOut.bind(this);\n  }\n  handleLogOut() {\n    this.setState({\n      loginVisibility: true,\n      currentAcc: undefined,\n    });\n  }\n  handleLogin(username, pin) {\n    const valid = this.state.accounts.find((acc) => acc.username === username);\n    if (valid) {\n      this.setState({\n        currentAcc: this.state.accounts.find(\n          (acc) => acc.username === username\n        ),\n        loginVisibility: false,\n      });\n    }\n  }\n\n  handleUploadMoney(forAcc, amount, message = \"upload\") {\n    console.log(forAcc, amount);\n    if (amount <= 0) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid value\",\n      });\n    } else\n      this.setState((prev) => {\n        return {\n          currentAcc: {\n            ...prev.currentAcc,\n            movements: [\n              {\n                amount: amount,\n                date: date,\n                transactionTyp: \"upload\",\n                sender: forAcc,\n                recepient: forAcc,\n                message: message,\n              },\n              ...prev.currentAcc.movements,\n            ],\n            balance: prev.currentAcc.balance + amount,\n          },\n          accounts: this.state.accounts.map((acc) => {\n            if (acc.username === forAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: +amount,\n                    date: date,\n                    transactionTyp: \"upload\",\n                    sender: forAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance + amount,\n              };\n            }\n            return acc;\n          }),\n        };\n      });\n  }\n\n  handleCloseOverlay() {\n    this.setState({\n      overlayHidden: true,\n    });\n  }\n  escFunction(event) {\n    if (event.keyCode === 27) {\n      this.setState({\n        overlayHidden: true,\n      });\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.escFunction, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.escFunction, false);\n  }\n  handleBlock(fromAcc, forAcc, message = \"\") {\n    if (fromAcc === \"jm\" || fromAcc === \"tm\") {\n      this.setState((prev) => {\n        return {\n          currentAcc: prev.currentAcc,\n          accounts: this.state.accounts.map((acc) => {\n            if (acc.username === forAcc) {\n              return { ...acc, message: message, isBlocked: !acc.isBlocked };\n            }\n            return acc;\n          }),\n        };\n      });\n    }\n    console.log(\"you are not allowed use this functionality\");\n  }\n\n  handleLend(fromAcc, forAcc, amount, message = \"dunno\") {\n    const valid = this.state.accounts.find((acc) => acc.username === forAcc);\n    let date = format(new Date(), \"dd/MM/yy\");\n    if (!forAcc && !amount) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"nincsenek adatok\",\n      });\n    } else if (amount > this.state.currentAcc.balance) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"nincsen eleg zseton\",\n      });\n    } else if (fromAcc === forAcc) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"magadnak nem tucc kuldeni\",\n      });\n    } else if (!valid) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid acc\",\n      });\n    } else if (amount <= 0) {\n      this.setState({\n        overlayHidden: false,\n        overlayText: \"invalid value\",\n      });\n    } else {\n      this.setState((prev) => {\n        //////////debt is not an empty array////////////////////\n        if (prev.currentAcc.owed.some((item) => item.forWho === forAcc)) {\n          return {\n            currentAcc: {\n              ...prev.currentAcc,\n              movements: [\n                {\n                  amount: -amount,\n                  date: date,\n                  transactionTyp: \"lend\",\n                  sender: fromAcc,\n                  recepient: forAcc,\n                  message: message,\n                },\n                ...prev.currentAcc.movements,\n              ],\n              balance: prev.currentAcc.balance - amount,\n              owed: prev.currentAcc.owed.map((item) => {\n                if (item.forWho === forAcc) {\n                  return { value: item.value + amount, forWho: forAcc };\n                } else {\n                  return item;\n                }\n              }),\n              // [{ value: amount, forWho: forAcc }, ...prev.currentAcc.owed],\n            },\n            accounts: this.state.accounts.map((acc) => {\n              if (acc.username === fromAcc) {\n                return {\n                  ...acc,\n                  movements: [\n                    {\n                      amount: -amount,\n                      date: date,\n                      transactionTyp: \"lend\",\n                      sender: fromAcc,\n                      recepient: forAcc,\n                      message: message,\n                    },\n                    ...acc.movements,\n                  ],\n                  balance: acc.balance - amount,\n                  owed: acc.owed.map((item) => {\n                    if (item.forWho === forAcc) {\n                      return { value: item.value + amount, forWho: forAcc };\n                    } else {\n                      return item;\n                    }\n                  }),\n                  // [{ value: amount, forWho: forAcc }, ...acc.owed],\n                };\n              }\n              if (acc.username === forAcc) {\n                return {\n                  ...acc,\n                  movements: [\n                    {\n                      amount: amount,\n                      date: date,\n                      transactionTyp: \"borrow\",\n                      sender: fromAcc,\n                      recepient: forAcc,\n                      message: message,\n                    },\n                    ...acc.movements,\n                  ],\n                  balance: acc.balance + amount,\n                  debt: acc.debt.map((item) => {\n                    if (item.to === fromAcc) {\n                      return { value: item.value + amount, to: fromAcc };\n                    } else {\n                      return item;\n                    }\n                  }),\n                  // [{ value: amount, to: fromAcc }, ...acc.debt],\n                };\n              }\n              return acc;\n            }),\n          };\n        }\n\n        ///////// debt is an empty array //////////////////\n        return {\n          currentAcc: {\n            ...prev.currentAcc,\n            movements: [\n              {\n                amount: -amount,\n                date: date,\n                transactionTyp: \"lend\",\n                sender: fromAcc,\n                recepient: forAcc,\n                message: message,\n              },\n              ...prev.currentAcc.movements,\n            ],\n            balance: prev.currentAcc.balance - amount,\n            owed: [{ value: amount, forWho: forAcc }, ...prev.currentAcc.owed],\n\n            // [{ value: amount, forWho: forAcc }, ...prev.currentAcc.owed],\n          },\n          accounts: this.state.accounts.map((acc) => {\n            if (acc.username === fromAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: -amount,\n                    date: date,\n                    transactionTyp: \"lend\",\n                    sender: fromAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance - amount,\n                owed: [{ value: amount, forWho: forAcc }, ...acc.owed],\n              };\n            }\n            if (acc.username === forAcc) {\n              return {\n                ...acc,\n                movements: [\n                  {\n                    amount: amount,\n                    date: date,\n                    transactionTyp: \"borrow\",\n                    sender: fromAcc,\n                    recepient: forAcc,\n                    message: message,\n                  },\n                  ...acc.movements,\n                ],\n                balance: acc.balance + amount,\n                debt: [{ value: amount, to: fromAcc }, ...acc.debt],\n              };\n            }\n            return acc;\n          }),\n        };\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Overlay\n            overlayText={this.state.overlayText}\n            hidden={this.state.overlayHidden}\n            handleCloseOverlay={this.handleCloseOverlay}\n          />\n          <TopNav\n            currentAcc={this.state.currentAcc}\n            login={this.handleLogin}\n            logOutBtnVisibility={this.state.loginVisibility}\n            logOut={this.handleLogOut}\n          />\n          <Route\n            render={({ location }) => (\n              <TransitionGroup>\n                <CSSTransition\n                  classNames=\"login-transition\"\n                  timeout={1000}\n                  key={location.key}\n                >\n                  <Switch location={location}>\n                    <Route path=\"/login\">\n                      <Login\n                        currentAcc={this.state.currentAcc}\n                        login={this.handleLogin}\n                        loginVisibility={this.state.loginVisibility}\n                      />\n                      {this.state.currentAcc ? <Redirect to=\"/\" /> : \"\"}\n                    </Route>\n                    {this.state.currentAcc ? \"\" : <Redirect to=\"/login\" />}\n                    <Route path=\"/\">\n                      <Account\n                        accounts={this.state.accounts}\n                        currentAcc={this.state.currentAcc}\n                        handleBlock={this.handleBlock}\n                        lend={this.handleLend}\n                        uploadMoney={this.handleUploadMoney}\n                      />\n                    </Route>\n                  </Switch>\n                </CSSTransition>\n              </TransitionGroup>\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/Users/Barna/Documents/Code/household-account/src/TopNav.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Account.jsx",["62"],"import React from \"react\";\nimport \"./Account.scss\";\n\nimport \"./data\";\nimport { compareAsc, format } from \"date-fns\";\nimport Movements from \"./Movements\";\nimport NewOperator from \"./NewOperator\";\nimport Status from \"./Status\";\nimport Counter from \"./Counter\";\n\nclass Account extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentAcc: this.props.currentAcc, /// <= this is not working\n      currentValue: \"\",\n      recepient: \"\",\n      accToBlock: \"\",\n      lendAmount: \"\",\n      message: \"\",\n      amount: \"\",\n    };\n    this.blockBtnText = this.blockBtnText.bind(this);\n  }\n  blockBtnText() {\n    const acc = this.props.accounts.find((acc) => {\n      return acc.username === this.state.accToBlock;\n    });\n    if (acc === undefined || acc.isBlocked === false) {\n      return \"block\";\n    } else {\n      return \"unblock\";\n    }\n  }\n\n  render() {\n    let date = format(new Date(), \"dd/MM/yy\");\n    return (\n      <div\n        className=\"main\"\n        // style={\n        //   this.props.currentAcc === undefined ? { opacity: 0 } : { opacity: 1 }\n        // }\n      >\n        <Status\n          currentAcc={this.props.currentAcc}\n          date={date}\n          accounts={this.props.accounts}\n        />\n        <Counter />\n\n        {/* account component */}\n        <div className=\"accBody\">\n          <div className=\"ops\">\n            <div className=\"op op--lend\">\n              <h2>Lend money</h2>\n              <form\n                action=\"#\"\n                className=\"form form--lend\"\n                style={\n                  this.props.currentAcc === undefined\n                    ? { opacity: 0 }\n                    : this.props.currentAcc.isBlocked === true\n                    ? { opacity: 0 }\n                    : { opacity: 1 }\n                }\n              >\n                <div className=\"input-flex\">\n                  <input\n                    value={this.state.recepient}\n                    onChange={(e) => {\n                      this.setState({ recepient: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input form__input--forWho\"\n                  />\n\n                  <input\n                    value={this.state.lendAmount}\n                    onChange={(e) => {\n                      this.setState({ lendAmount: Number(e.target.value) });\n                    }}\n                    type=\"number\"\n                    className=\"form__input form__input--amount\"\n                  />\n                  <button\n                    className=\"form__btn form__btn--lend\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      if (this.state.message === \"\") {\n                        this.props.lend(\n                          this.props.currentAcc.username,\n                          this.state.recepient,\n                          this.state.lendAmount\n                        );\n                      } else {\n                        this.props.lend(\n                          this.props.currentAcc.username,\n                          this.state.recepient,\n                          this.state.lendAmount,\n                          this.state.message\n                        );\n                      }\n                      this.setState({\n                        recepient: \"\",\n                        lendAmount: \"\",\n                        message: \"\",\n                      });\n                    }}\n                  >\n                    &rarr;\n                  </button>\n                </div>\n                <div className=\"label-flex\">\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      For Who\n                    </label>\n                  </div>\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Amount\n                    </label>\n                  </div>\n                </div>\n                <input\n                  className=\"form__input form__input--message\"\n                  maxLength=\"50\"\n                  value={this.state.message}\n                  onChange={(e) => {\n                    this.setState({ message: e.target.value });\n                  }}\n                  type=\"text\"\n                />\n                <div>\n                  <div className=\"label-flex\">\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Explanation\n                    </label>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div className=\"op op--upload\">\n              <h2>Upload money</h2>\n              <form\n                action=\"#\"\n                className=\"form form--borrow\"\n                style={\n                  this.props.currentAcc === undefined\n                    ? { opacity: 0 }\n                    : this.props.currentAcc.isBlocked === true\n                    ? { opacity: 0 }\n                    : { opacity: 1 }\n                }\n              >\n                <div className=\"input-flex\">\n                  {/* <input\n                    value={this.state.recepient}\n                    onChange={(e) => {\n                      this.setState({ recepient: e.target.value });\n                    }}\n                    type=\"text\"\n                    className=\"form__input\"\n                  /> */}\n\n                  <input\n                    value={this.state.amount}\n                    onChange={(e) => {\n                      this.setState({ amount: Number(e.target.value) });\n                    }}\n                    type=\"number\"\n                    className=\"form__input\"\n                  />\n                  <button\n                    className=\"form__btn form__btn--borrow\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      this.props.uploadMoney(\n                        this.props.currentAcc.username,\n                        this.state.amount\n                      );\n                      this.setState({\n                        recepient: \"\",\n                        amount: \"\",\n                      });\n                    }}\n                  >\n                    &rarr;\n                  </button>\n                </div>\n                <div className=\"label-flex\">\n                  {/* <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Account\n                    </label>\n                  </div> */}\n                  <div>\n                    <label htmlFor=\"#\" className=\"form__label\">\n                      Amount\n                    </label>\n                  </div>\n                </div>\n              </form>\n            </div>\n            {/* {this.props.currentAcc !== undefined &&\n            (this.props.currentAcc.username === \"jm\" ||\n              this.props.currentAcc.username === \"tm\") ? (\n              <div className=\"op op--block\">\n                <h2>Block account</h2>\n                <form action=\"#\" className=\"form form--block\">\n                  <div className=\"input-flex\">\n                    <input\n                      value={this.state.accToBlock}\n                      onChange={(e) => {\n                        this.setState({ accToBlock: e.target.value });\n                        this.blockBtnText();\n                      }}\n                      type=\"text\"\n                      className=\"form__input form__input--Whoose\"\n                    />\n\n                    <input\n                      value={this.state.message}\n                      onChange={(e) => {\n                        this.setState({ message: e.target.value });\n                      }}\n                      type=\"text\"\n                      className=\"form__input form__input--Why\"\n                    />\n                    <button\n                      className=\"form__btn form__btn--block\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        this.props.handleBlock(\n                          this.props.currentAcc.username,\n                          this.state.accToBlock,\n                          this.state.message\n                        );\n                        this.setState({\n                          accToBlock: \"\",\n                          message: \"\",\n                        });\n                      }}\n                    >\n                      {this.blockBtnText()}\n                    </button>\n                  </div>\n                  <div className=\"label-flex\">\n                    <div>\n                      <label htmlFor=\"#\" className=\"form__label\">\n                        Whoose Acc\n                      </label>\n                    </div>\n                    <div>\n                      <label htmlFor=\"#\" className=\"form__label\">\n                        Why\n                      </label>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            ) : (\n              \"\"\n            )} */}\n          </div>\n          <div className=\"mov\">\n            {this.props.currentAcc?.movements.map((mov, i) => {\n              return (\n                <Movements\n                  recepient={mov.recepient}\n                  transactionTyp={mov.transactionTyp}\n                  key={i + 1}\n                  i={i}\n                  type={mov.amount > 0 ? \"dep\" : \"withD\"}\n                  mov={mov.amount}\n                  message={mov.message}\n                  date={mov.date}\n                />\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"summeries\">\n          <p className=\"summeries__label\">in</p>\n          <p className=\"summeries__value summeries__value--in\">\n            {this.props.currentAcc?.movements\n              .filter((mov) => mov > 0)\n              .reduce((acc, curr) => acc + curr, 0)}\n            €\n          </p>\n          <p className=\"summeries__label\">out</p>\n          <p className=\"summeries__value summeries__value--out\">\n            {this.props.currentAcc?.movements\n              .filter((mov) => mov < 0)\n              .reduce((acc, curr) => acc + curr, 0)}\n            €\n          </p>\n        </div>\n\n        <NewOperator />\n      </div>\n    );\n  }\n}\n\nexport default Account;\n","/Users/Barna/Documents/Code/household-account/src/data.js",[],"/Users/Barna/Documents/Code/household-account/src/Movements.jsx",[],"/Users/Barna/Documents/Code/household-account/src/NewOperator.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Overlay.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Status.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Login.jsx",[],"/Users/Barna/Documents/Code/household-account/src/Counter.jsx",["63","64"],"import React, { useEffect, useState } from \"react\";\nimport useCounter from \"./useCounter\";\n\nconst Counter = () => {\n  const [count, setCount] = useCounter();\n\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n};\n\nexport default Counter;\n","/Users/Barna/Documents/Code/household-account/src/useCounter.js",[],["65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":14,"column":10,"nodeType":"73","messageId":"74","endLine":14,"endColumn":20},{"ruleId":"71","severity":1,"message":"72","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":20},{"ruleId":"71","severity":1,"message":"75","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"76","line":1,"column":28,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"67","replacedBy":"77"},{"ruleId":"69","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'compareAsc' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.",["79"],["80"],"no-global-assign","no-unsafe-negation"]